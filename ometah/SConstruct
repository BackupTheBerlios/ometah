# -*- coding: iso-8859-1 -*-
################################################################################
#  $Id: SConstruct,v 1.33 2006/04/10 20:56:52 nojhan Exp $
#  Copyright : Free Software Fundation
#  Author : Johann Dréo <nojhan@gmail.com>
################################################################################

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation; either version 2.1 of
# the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
# License for more details.
# 
# You should have received a copy of the GNU Lesser General
# Public License along with this program; if not, write to the Free

# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# 02111-1307 USA


################################################################################
# Environment
################################################################################

# flags for optimization, use them in production
#foptim = '-fcaller-saves -fcse-follow-jumps -fcse-skip-blocks  \
#          -felide-constructors -fexpensive-optimizations -ffast-math \
#          -ffloat-store -funroll-all-loops -funroll-loops'
foptim = '-O2 -mfpmath=sse' # seems to go faster than with -03

# flags for checking the code
#-Wstrict-prototypes -Wmissing-prototypes 
fcheck = '-Wall -ansi -pedantic -Wimplicit \
          -Wredundant-decls -Wreturn-type -Wunused'
          
# flags for debugging
fdebug = '-ggdb'

# more flags
fsup = '-Wno-deprecated  -D _GLIBCXX_DEBUG '

# setting the environnement
env = Environment()

# setting the options
opts = Options()
opts.AddOptions( \
    BoolOption('static', 'Build a static version',0), \
    BoolOption('debug', 'Compile with the debug informations',0), \
    BoolOption('network', 'Compile with the network support',0), \
    BoolOption('python', 'Compile with the python bindings',0) \
)

opts.AddOptions( ('flags','Additional flags to pass to the compiler','') )

opts.Update(env)

flags=""
if env['debug']==1:
    flags = " ".join( [fcheck,fdebug,fsup,env['flags']] )
else:
    flags = " ".join( [fcheck,fsup,env['flags']] )

env.Replace( CCFLAGS = flags )

Help( \
"""
Usage:
scons [options...] [name=val...] [targets...]

Targets: 
scons ometah: build the main interface
scons install: install the files

Flags:""" + \
  opts.GenerateHelpText(env) + \
"""
Example:
scons ometah static=yes debug=no: build a static version of the main interface, without debugging informations
scons ometah static=0: build a the shared library and the interface dynamically linked
scons -c ometah: clean the files used to generate the interface
scons -c install: uninstall the files
scons -c: clean all the files used for the default build
"""
)

################################################################################
# Source files
################################################################################

# Common
common = ['itsPoint.cpp','geometry.cpp','itsSet.cpp','logic.cpp','matrix.cpp', \
          'random.cpp','string.cpp','Exception_oMetah.cpp']
common = [ 'common/'+i for i in common]
          
# Interface
interface = ['itsArgument.cpp']
interface = [ 'interface/'+i for i in interface]

# Problems
problem = ['itsProblem.cpp']
problem = [ 'problem/'+i for i in problem]

cec = ['itsCEC05_SSRPO_Base.cpp', 'itsCEC05_SSRPO_Problems.cpp']
cec = [ 'problem/CEC05/'+i for i in cec]

# Communication
communication = ['itsCommunication.cpp', \
                'itsCommunicationClient.cpp', 'itsCommunicationServer.cpp', \
                'itsCommunicationClient_embedded.cpp', 'itsCommunicationServer_embedded.cpp']
communication = [ 'communication/'+i for i in communication]

com_network = ['itsSocket.cpp', 'itsSocketClient.cpp','itsSocketServer.cpp', \
               'itsCommunicationClient_socket.cpp', 'itsCommunicationServer_socket.cpp']
com_network = [ 'communication/network/'+i for i in com_network]

com_languages = ['itsCommunicationClient_python.cpp']
com_languages = [ 'communication/languages/'+i for i in com_languages]

# Metaheuristic

metaheuristic = ['itsMetaheuristic.cpp']
metaheuristic = [ 'metaheuristic/'+i for i in metaheuristic]

estimation = ['itsEstimationOfDistribution.cpp','itsHybridEstimationOfDistribution.cpp']
estimation = [ 'metaheuristic/estimation/'+i for i in estimation]

sampling = ['itsGridSampling.cpp']
sampling = [ 'metaheuristic/sampling/'+i for i in sampling]

random = ['itsRandom.cpp']
random = [ 'metaheuristic/random/'+i for i in random]

neldermead = ['itsNelderMead.cpp']
neldermead = [ 'metaheuristic/neldermead/'+i for i in neldermead]

genetic = ['itsJpGenetic.cpp', 'itsSimpleGenetic.cpp']
genetic = [ 'metaheuristic/genetic/'+i for i in genetic]

antcolony = ['itsHybridContinuousInteractingAntColony.cpp']
antcolony = [ 'metaheuristic/antcolony/'+i for i in antcolony]

annealing = ['itsSimulatedAnnealing.cpp']
annealing = [ 'metaheuristic/annealing/'+i for i in annealing]


################################################################################
# Configuration
################################################################################

conf = Configure(env)

if not conf.CheckLib('libstdc++'):
    print 'The C++ standard library must be installed'
    Exit(1)
        
if env['python'] == 1:
    if not conf.CheckLibWithHeader('python2.4','python2.4/Python.h', 'C', 'void Py_Initialize();'):
        print 'Python 2.4 must be installed if you want to compile with python support'
        Exit(1)
        
if env['network'] == 1:
    hdr_unix_socket = ['sys/types.h', 'sys/socket.h', 'netinet/in.h', 'netdb.h', 'unistd.h', 'arpa/inet.h', 'fcntl.h']
    no_header_error = 0
    for h in hdr_unix_socket:
        if not conf.CheckCHeader(h):
            no_header_error = 1
    if no_header_error == 1:
        print 'Unix socket headers must be installed if you want to compile with python support'
        Exit(1)

        
env = conf.Finish()


################################################################################
# Targets
################################################################################

libPaths = ['.']
libs = ['ometah']

all = common + communication + metaheuristic + problem + cec + interface \
      + estimation + random + sampling + neldermead + antcolony + genetic + annealing 

if env['network'] == 1:
    all += com_network
    flags += ' -D WITH_SOCKET '
    env.Replace( CCFLAGS = flags )
    

if env['python'] == 1:
    all += com_languages
    flags += ' -D WITH_PYTHON '
    env.Replace( CCFLAGS = flags )
    
    libs += ['python2.4']
    
    
if env['static']==1:
    # static library
    Execute(Delete('libometah.so'))
    lib = env.StaticLibrary( target = 'ometah', \
        source = all)
    
    # static interface
    Execute(Delete('ometah'))
    ometah = env.Program( target = 'ometah', source = ['interface/ometah.cpp'], LIBS=libs, LIBPATH=libPaths  )
        
    # installation
    # FIXME : only works for Unix
    env.Install('/usr/local/bin', ometah)
    env.Alias('install', '/usr/local/bin')
    
else:
    # shared library
    Execute(Delete('libometah.a'))
    lib = env.SharedLibrary( target = 'ometah', \
        source = all )
        
    # standard interface
    Execute(Delete('ometah'))
    ometah = env.Program( target = 'ometah', source = ['interface/ometah.cpp'], LIBS=libs, LIBPATH=libPaths ) 

    # installation
    env.Install('/usr/lib', lib)
    env.Install('/usr/local/bin', ometah)
    env.Alias('install', '/usr/lib')
    env.Alias('install', '/usr/local/bin')
    

################################################################################
# Packaging
################################################################################

import AccumulatorAction, Zipper, SCons, os

# add builder to accumulate files
accuBuilder = env.Builder(action=AccumulatorAction.accumulatorFunction,
    source_factory=SCons.Node.FS.default_fs.Entry,
    target_factory=SCons.Node.FS.default_fs.Entry,
    multi=1)
env['BUILDERS']['Accumulate'] = accuBuilder

# add builder to zip files
zipBuilder = env.Builder(action=Zipper.zipperFunction,
   source_factory=SCons.Node.FS.default_fs.Entry,
   target_factory=SCons.Node.FS.default_fs.Entry,
   multi=0)
env['BUILDERS']['Zipper'] = zipBuilder

# temporary directory where files are stored
distDir = 'dist'
Execute(Delete(distDir))

# base name of the package
zipName = "ometah-0.2.4a"+"_"+os.uname()[0]+"-"+os.uname()[4]

accDir = os.path.join(distDir,zipName)

if env['debug']==1:
    zipName += "-debug"

if env['static']==1:
    zipName += "-static"
else:
    env.Accumulate(accDir, 'libometah.so')

env.Accumulate(accDir, 'ometah')    
env.Accumulate(accDir, ['COPYING','AUTHORS','README'])

# zip an archive
env.Zipper(zipName, distDir)

# use dist as target
env.Alias('dist',[zipName])

# default target
Default(ometah)
