# -*- coding: iso-8859-1 -*-
################################################################################
#  $Id: SConstruct,v 1.16 2005/11/05 16:52:52 nojhan Exp $
#  Copyright : Free Software Fundation
#  Author : Johann Dréo <nojhan@gmail.com>
################################################################################

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation; either version 2.1 of
# the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
# License for more details.
# 
# You should have received a copy of the GNU Lesser General
# Public License along with this program; if not, write to the Free

# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# 02111-1307 USA


################################################################################
# Environment
################################################################################

# flags for optimization, use them in production
foptim = '-fcaller-saves -fcse-follow-jumps -fcse-skip-blocks  \
          -felide-constructors -fexpensive-optimizations -ffast-math \
          -ffloat-store -funroll-all-loops -funroll-loops -O3'

# flags for checking the code
#-Wstrict-prototypes -Wmissing-prototypes 
fcheck = '-Wall -ansi -pedantic -Wimplicit \
          -Wredundant-decls -Wreturn-type -Wunused'
          
# flags for debugging
fdebug = '-ggdb'

# more flags
fsup = '-Wno-deprecated -ffast-math'

# setting the environnement
env = Environment(CCFLAGS = " ".join( [fcheck,fdebug,fsup] ) )


################################################################################
# Source files
################################################################################

# Common
common = ['itsPoint.cpp','geometry.cpp','itsSet.cpp','logic.cpp','matrix.cpp', \
          'random.cpp','string.cpp']
common = [ 'common/'+i for i in common]
          
# Interface
interface = ['itsArgument.cpp']
interface = [ 'interface/'+i for i in interface]

# Problems
problem = ['itsProblem.cpp']
problem = [ 'problem/'+i for i in problem]

cec = ['itsCEC05_SSRPO_Base.cpp', 'itsCEC05_SSRPO_Problems.cpp']
cec = [ 'problem/CEC05/'+i for i in cec]

# Communication
communication = ['itsCommunication.cpp', \
                'itsCommunicationClient.cpp', 'itsCommunicationServer.cpp', \
                'itsCommunicationClient_embedded.cpp', 'itsCommunicationServer_embedded.cpp']
communication = [ 'communication/'+i for i in communication]

# Metaheuristic

metaheuristic = ['itsMetaheuristic.cpp']
metaheuristic = [ 'metaheuristic/'+i for i in metaheuristic]

estimation = ['itsEstimationOfDistribution.cpp','itsHybridEstimationOfDistribution.cpp']
estimation = [ 'metaheuristic/estimation/'+i for i in estimation]

sampling = ['itsGridSampling.cpp']
sampling = [ 'metaheuristic/sampling/'+i for i in sampling]

random = ['itsRandom.cpp']
random = [ 'metaheuristic/random/'+i for i in random]

neldermead = ['itsNelderMead.cpp']
neldermead = [ 'metaheuristic/neldermead/'+i for i in neldermead]

genetic = ['itsJpGenetic.cpp', 'itsSimpleGenetic.cpp']
genetic = [ 'metaheuristic/genetic/'+i for i in genetic]

antcolony = ['itsHybridContinuousInteractingAntColony.cpp']
antcolony = [ 'metaheuristic/antcolony/'+i for i in antcolony]


################################################################################
# Configuration
################################################################################

conf = Configure(env)
have_cimg = False
if conf.CheckCXXHeader('CImg.h'):
    have_cimg = True
env = conf.Finish()


################################################################################
# Targets
################################################################################

# registration interface must have the CImg library available
#~ if have_cimg == False:
    #~ print "You must have the CImg.h library installed to build ometah registration"
#~ else:
    #~ registration = ['problem/registration/itsRegistration.cpp']

    #~ #library flags for CImg library
    #~ #fcimg = '-ffast-math' #-I/usr/X11R6/include -L/usr/X11R6/lib -lX11 -lpthread'
    #~ #env_registration = env.Copy()
    #~ #env_registration.Append( CCFLAGS = " "+fcimg )
  
    #~ problem = ['itsRegistration.cpp']
    #~ oregistration = env.Program( target = 'oregistration', \
        #~ source = ['interface/registration/ometah_registration.cpp'] \
        #~ + registration + common + communication + metaheuristic + interface \
        #~ + sampling + estimation + neldermead + antcolony + genetic )

opts = Options()
opts.AddOptions(
    BoolOption('static', 'Build a static version',0),
)
opts.Update(env)

Help( \
"""
Targets: 
ometah: build the main interface
example: build a simple example interface
shared: build the shared library version (you must set the static option to 0)

Options:""" + \
  opts.GenerateHelpText(env) \
)

if env['static']==1:
    # static interface
    Execute(Delete('ometah'))
    ometah = env.Program( target = 'ometah', source = ['interface/ometah.cpp'] \
        + common + communication + metaheuristic + problem + cec + interface \
        + estimation + random + sampling + neldermead + antcolony + genetic )
        
    # simple example
    Execute(Delete('example'))
    example = env.Program( target = 'example', source = ['interface/example_simple.cpp'] \
        + common + communication + metaheuristic + problem + cec + interface \
        + estimation + neldermead ) 

else:
    # shared library
    shared = env.SharedLibrary( target = 'ometah', \
        source = common + communication + metaheuristic + problem + cec + interface \
        + estimation + random + sampling + neldermead + antcolony + genetic )
        
    # standard interface
    Execute(Delete('ometah'))
    ometah = env.Program( target = 'ometah', source = ['interface/ometah.cpp'], LIBS='ometah', LIBPATH='.') 
    
    # simple example
    Execute(Delete('example'))
    example = env.Program( target = 'example', source = ['interface/example_simple.cpp'], LIBS='ometah', LIBPATH='.') 



Default(ometah)
